package LintCode;

import java.util.Arrays;

/**
 * QW 是一个回合制游戏的玩家，今天他决定去打怪。
 *
 * QW 在一场战斗中会碰到 n 个怪物，每个怪物有攻击力 atk[i]，每回合结束时如果第 i 个怪物还活着，就会对 QW 造成 atk[i] 的伤害。QW 只能在每回合开始时击杀一个怪物，请帮 QW 出他打完所有怪物最少需要损失多少生命值。
 *
 * 样例
 * 样例 1：
 *
 * 输入：atk = [19,3]
 * 输出：3
 * 样例 2：
 *
 * 输入：atk = [1,3,2,5]
 * 输出：10
 * 注意事项
 * n, atk[i] <= 100000
 * 答案可能超过 int 范围
 */
public class 回合制游戏 {
    public static void main(String[] args) {
        int[] atk = {12840, 15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,15652,54825,70871,51794,43615,64267,70632,37745,18185,40644,47192,42906,5028,62940,62359,44128,54180,71243,44560,93184,18450,70250,89884,50881,42420,13008,36248,87748,89452
                ,1,2,23,43,5436,546,3544,4,5367,4657,657,354,35,46,3456,3546,35,24,36,754,35467,56,324,6548,675,567,8,567,345,9,68,234,87,987,89234,234,654,780,354,234,2,345,23,654,7,654,7867,58,67,957,9,54
        };
        //38663327941
        System.out.println(atk.length);

        System.out.println(getAns3(atk));
    }

    public static int f2(String s) {
        String[] as = s.split("&");
        return Integer.parseInt(as[0]) * Integer.parseInt(as[1]);
    }

    public static long getAns4(int[] atk) {
        long start = System.currentTimeMillis();
        if (null == atk || atk.length == 0) {
            return 0;
        }
        int len = atk.length;
        int[] b = new int[100001];
        for (int i = 0;i < len; i++) {
            b[atk[i]]++;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i< 100001;i++) {
            if (b[i]!=0) {
                sb.append(b[i]+"&" + i + ",");
            }
        }
        String[] as = sb.toString().split(",");
        int slen = as.length;
        //System.out.println(Arrays.toString(as));
        long sum = 0;
        long sum2;
        String[] as2 = null;
        int n = 0;
        for (int i = slen-1; i>=0; i--) {
            sum2 = 0;
            for (int j = 0; j < i; j++) {
                sum2 += f2(as[j]);
            }
            as2 = as[i].split("&");
            n = Integer.parseInt(as2[0]);
            if (n > 1) {
                sum += sum2 * n + Integer.parseInt(as2[1]) * f(n-1);
            } else {
                sum += sum2;
            }
        }
        System.out.println(System.currentTimeMillis() - start);
        return sum;
    }

    public static long getAns3(int[] atk) {
        long start = System.currentTimeMillis();
        if (null == atk || atk.length == 0) {
            return 0;
        }
        int len = atk.length;
        int[] b = new int[100001];
        for (int i = 0;i < len; i++) {
            b[atk[i]]++;
        }
        long sum = 0;
        long sum2;
        for (int i = 100000; i > 0; i--) {
            if (b[i] != 0) {
                sum2 = 0;
                for (int j = 1; j < i; j++) {
                    sum2 += j * b[j];
                }
                if(b[i] > 1) {
                    sum += sum2*b[i] + i*f(b[i]-1);
                } else {
                    sum += sum2;
                }
            }
        }
        System.out.println(System.currentTimeMillis() - start);//334
        return sum;
    }
    public static int f(int n) {
        return n*(n+1)/2;
    }

    public static long getAns2(int[] atk) {
        long start = System.currentTimeMillis();
        if (null == atk || atk.length == 0) {
            return 0;
        }
        int len = atk.length;
        Arrays.sort(atk);
        long sum = 0;
        for (int i = 0; i < len; i++) {
            for (int j = 0;j < len - i - 1; j++) {
                sum += atk[j];
            }
        }
        System.out.println(System.currentTimeMillis() - start);
        return sum;
    }


    /**
     * @param atk: the atk of monsters
     * @return: Output the minimal damage QW will suffer
     */
    public static long getAns(int[] atk) {
        long start = System.currentTimeMillis();
        if (null == atk || atk.length == 0) {
            return 0;
        }
        int len = atk.length;
        int max = 0;
        int n = 0;
        long sum = 0;
        for (int i = 0; i < len; i++) {
            max = 0;
            for (int j = 0;j < len - i; j++) {
                if (atk[j] > max) {
                    max = atk[j];
                    n = j;
                }
            }
            atk[n] = atk[len - 1 - i];
            atk[len - 1 - i] = 0;
            for (int j = 0;j < len - i; j++) {
                sum += atk[j];
            }
        }
        System.out.println(System.currentTimeMillis() - start);//334
        return sum;
    }
}
